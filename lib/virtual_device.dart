library virtual_device;

import 'dart:io';
import 'dart:async';

export 'package:virtual_device/src/android_emulator.dart';
export 'package:virtual_device/src/ios_simulator.dart';

enum OperatingSystem {
  iOS,
  android,
  tvOS,
  watchOS,
}

abstract class VirtualDevice {
  /// Example: "iPad Air 2"
  String get model;

  /// The humanized name of the device.
  /// Implementers of [VirtualDevice] should generate the name in a way that increments
  /// prior creations of the [model] and [osVersion].
  String get name;

  OperatingSystem get os;

  /// Example: "14.2"
  String get osVersion;

  /// The UUID generated by the shell command
  String get uuid;

  /// Creates a new version of the device
  Future<VirtualDevice> create();

  /// Permanently delete the device. For removing data only, see [wipe].
  Future<void> delete();

  /// Boots the device
  Future<void> start();

  /// Turns off the device
  Future<void> stop();

  @override
  String toString() =>
      '$name / $model / ${os.toString().split(".").last} $osVersion / $uuid';

  /// Remove all data from the device. To permanently remove the device, see [delete].
  Future<void> wipe();

  /// If the command line execution returns an exception, throw it in Dart.
  static Future<String> runWithError(String cmd, List<String> args) async {
    final processOutput = await Process.run(cmd, args);

    if (processOutput.stderr != null &&
        processOutput.stderr.toString().isNotEmpty) {
      throw StateError(processOutput.stderr);
    }

    return processOutput.stdout;
  }
}
